# migrations/versions/6059853201b6_add_powercurvepoint_table.py
"""Add PowerCurvePoint table

Revision ID: 6059853201b6
Revises: fc2020131868
Create Date: <Timestamp when you ran migrate>

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
# --- MANUALLY ADDED/VERIFIED ---
revision = '6059853201b6'
down_revision = 'fc2020131868'
# --- END MANUAL ---
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('power_curve_point',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('duration_seconds', sa.Integer(), nullable=False),
    sa.Column('max_power_watts', sa.Float(), nullable=False),
    sa.Column('fit_file_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['fit_file_id'], ['fit_file.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('power_curve_point', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_power_curve_point_duration_seconds'), ['duration_seconds'], unique=False)
        batch_op.create_index(batch_op.f('ix_power_curve_point_fit_file_id'), ['fit_file_id'], unique=False)

    # Alembic also detected these changes based on model vs initial script state
    with op.batch_alter_table('fit_file', schema=None) as batch_op:
        batch_op.alter_column('processing_status',
                existing_type=sa.VARCHAR(length=50),
                nullable=False) # Added nullable=False based on model default/nullable status
        batch_op.create_index(batch_op.f('ix_fit_file_processing_status'), ['processing_status'], unique=False)

    # This detection might be spurious if the constraint already exists,
    # but including it based on Alembic's output. If it causes errors, comment it out.
    # with op.batch_alter_table('user', schema=None) as batch_op:
    #    batch_op.drop_constraint('user_username_key', type_='unique') # Detected removed unique constraint 'user_username_key' on 'user' - This seems odd, maybe verify if it exists first?

    # ### end Alembic commands ###
    pass


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Reverse the changes from upgrade()

    # This might need adjustment depending on whether the constraint actually existed
    # with op.batch_alter_table('user', schema=None) as batch_op:
    #     batch_op.create_unique_constraint('user_username_key', ['username'])

    with op.batch_alter_table('fit_file', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_fit_file_processing_status'))
        batch_op.alter_column('processing_status',
                existing_type=sa.VARCHAR(length=50),
                nullable=True) # Revert nullable status

    with op.batch_alter_table('power_curve_point', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_power_curve_point_fit_file_id'))
        batch_op.drop_index(batch_op.f('ix_power_curve_point_duration_seconds'))

    op.drop_table('power_curve_point')
    # ### end Alembic commands ###
    pass
