# .github/workflows/docker-publish.yml
name: Docker Publish Release

# Controls when the workflow will run
on:
  release:
    types: [published] # Run only when a new release is published on GitHub

permissions:
  contents: read       # Needed to check out the repository code
  packages: write      # Needed to push Docker image to GitHub Container Registry (ghcr.io)

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      # 1. Checkout the repository code at the specific release tag
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Log in to GitHub Container Registry (ghcr.io)
      # Uses the automatically generated GITHUB_TOKEN for authentication
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # User/Org who triggered the workflow
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Extract metadata (tags, labels) for Docker
      # This action automatically creates tags based on the Git reference (e.g., release tag)
      # It will create tags like: ghcr.io/USERNAME/REPO:latest, ghcr.io/USERNAME/REPO:v1.0.0
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # Image name based on user/org and repo name

      # 4. Set up Docker Buildx
      # Buildx allows building images for multiple platforms (though not configured here)
      # and provides improvements over the standard docker build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5. Build and push Docker image
      # Uses the Dockerfile in the repository root
      # Pushes to ghcr.io using the extracted metadata (tags and labels)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the repository root
          push: true # Push the image after building
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by metadata-action
          labels: ${{ steps.meta.outputs.labels }} # Use labels generated by metadata-action
          cache-from: type=gha # Enable GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max
